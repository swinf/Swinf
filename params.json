{"name":"Swinf","tagline":"a simple micro web framework for python","body":"#Swinf Web Frame\r\n\r\nSwinf is a simple micro-framework for small web application and has no dependencies other than the Python Standard Liberaty.\r\n\r\nIt offers a built-in HTTP Server, and a simple route binding mechanism.\r\n\r\n\r\n##Commands\r\nrun command : `swinf-admin.py startproject newproject` and swinf will create a project directory.\r\n\r\nInside current project directory, there are a `main.py` and three subdirectories:\r\n\r\ncontroller:\r\n\r\n    containing controllers.\r\n\r\nview:\r\n    \r\n    containing view template files.\r\n\r\n    subdirecties:\r\n        \r\n        static/: contains static files\r\n        \r\n        static/images: images here\r\n        \r\n        static/style: css files here\r\n\r\n        static/script: js files here\r\n\r\n        static/files: other static files here\r\n\r\nmodel:\r\n    \r\n    you can put your database controlling code here.\r\n\r\n\r\nYou can add some controllers in `controller` directory and run `main.py`, and it will work.\r\n\r\n##Template\r\nCurrently, swinf have a simple template engine called `SimpleTemplate`.\r\n\r\nthe tpl syntax follows below\r\n\r\n```html\r\n\r\n    <!-- in a tpl file -->\r\n\r\n    {%\r\n    # multiline code\r\n\r\n    def bold_wrapper(txt):\r\n        return \"<b>\" + txt + \"</b>\"\r\n    endef\r\n    %}\r\n\r\n    %% # sigleline code\r\n    %% if name:\r\n    <h1> hello {{name}}!</h1>\r\n    %% else:\r\n    <h1> Hello World!</h1>\r\n    %% endif\r\n\r\n    <ul>\r\n    %% for i in range(100):\r\n        <li>no: {{i}}</li>\r\n    %% endfor\r\n    </ul>\r\n```\r\n\r\nTo use the **template**, you can use code like below:\r\n\r\n```python\r\n    \r\n    from swinf.template import template\r\n    # pass tpl source\r\n    html = template(\"<h1>hello {{name}}\", name='world')\r\n\r\n    # pass a tpl file\r\n    html = template(path='index.tpl', name='world')\r\n```\r\n\r\n##Example\r\nIn swinf, there is no `urls.py`-like config file, instead, there are two simple route-config ways:\r\n\r\n* A Bottle.py like route binding mechanism\r\n\r\n```python\r\n    \r\n    from swinf.swinf import run\r\n    from swinf.selector import route\r\n    \r\n    # a simple controller \r\n    @route('/hello/:name')\r\n    def hello(name):\r\n        return '<h1>Hello %s!</h1>' % name.title()\r\n\r\n    run(host='localhost', port=8080)\r\n```\r\n\r\n* Much simpler route binding mechanism\r\n\r\n```python\r\n\r\n    # module1.py\r\n    from swinf.selector import handler\r\n\r\n    # --------- your code here -----------\r\n\r\n    @handler(\"GET\")\r\n    def hello():\r\n        return '<h1>Hello</h1>' \r\n\r\n    @handler(\"GET\")\r\n    def world():\r\n        return '<h1>World</h1>' \r\n```\r\n\r\nThis will will automatically bind route **/module1/hello** to handler **controller.module1.hello** and **/module1/world** to handler **controller.module1.world**. \r\n\r\nYou don't have to add routes manully.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}